このファイルは、次のドキュメントを日本語訳した資料です。
<https://github.com/git/git/blob/v2.12.0/Documentation/technical/index-format.txt>
訳注は【訳注: 】で記載します。

----

Git Index フォーマット
================

== GitのIndexファイルは次のフォーマットに従う。

  全てのバイナリ数値列は、ネットワークオーダーに並べる。以下では断りのない限り、Version 2について記載する。
    - 12バイトのヘッダーは以下で構成される。
      - 4バイトのシグネチャ: { 'D', 'I', 'R', 'C' }("dircache"の意味)
      - 4バイトのバージョン値: 現在は、2, 3, 4がサポートされている。
      - 後述するindexエントリの総数(32-bit)
    - ソートしたindexエントリ(後述)
    - 拡張機能
      - 拡張機能は、シグネチャで識別される。オプショナルな拡張機能は、Gitが理解できなければ無視できる。Gitは現在、"cached tree"と"resolve undo"拡張機能だけサポートしている。
        - 4バイトの拡張機能シグネチャ。シグネチャが大文字('A'..'Z')から始まる場合、この拡張機能はオプショナルであることを表す。
        - 拡張機能のバイト長(32-bit)
        - 拡張機能のデータ
    - 160bitのSHA-1ハッシュ値（このハッシュ値より前のindex fileの内容のハッシュ）

== Indexエントリ

  Indexエントリはname列の昇順でソートされる。ソートは、文字列をbit列として符号無し整数と解釈して並べる。(つまり、memcmp()の順番。ローカライズ・ディレクトリ区切り文字の'/'を含まない。)
  同名のエントリは、stage列でソートされる。

  32-bitのctime seconds。ファイルのメタデータの最終更新時。
    これは、stat(2)のデータ
  32-bitのctime nanosecond fractions
    これは、stat(2)のデータ
  32-bitのmtime seconds。ファイルデータの最終更新時。
    これは、stat(2)のデータ
  32-bitのmtime nanosecond fractions
    これは、stat(2)のデータ
  32-bitのdev
    これは、stat(2)のデータ
  32-bitのino
    これは、stat(2)のデータ
  32-bitのmode。高bitから順に以下で構成される。
  【訳注: 4+3+9=16 で32に足りないが、最新の資料では頭に16-bitの0を付与する記述有り<https://github.com/git/git/blob/v2.43.0/Documentation/gitformat-index.txt#L84C38-L84C38>】
    4-bitのオブジェクトタイプ
      有効な値は、1000(通常のファイル)、1010(シンボリックリンク)、1110(gitリンク)
    3-bitは未使用
    9-bitはUnix権限。通常のファイルに対しては、0755と0644のみが有効。シンボリックリンクとgitリンクでは0。
  32-bitのuid
    これは、stat(2)のデータ
  32-bitのgid
    これは、stat(2)のデータ
  32-bitのファイルサイズ
    これは、stat(2)から取得するディスク上のサイズ。32-bitに切り捨てられる。
  160-bitのSHA-1ハッシュ値。このエントリが示すオブジェクトのハッシュ値。
  16-bitのフラグ。高bitから順に以下で構成される。
    1-bitの"assume-valid flag"
    1-bitの"extended flag" (バージョン2では必ず0)
    2-bitのstage状態 (during merge)
    12-bitのname列の長さ。長さが0xFFF【脚注: 4096】以下の場合はその長さが、それを超える場合は0xFFFをこの列に記述する。
  (バージョン3以降のみ) 上述の"extended flag"が1を超える場合のみ、16-bitのフィールドがある。高bitから順に以下で構成される。
    1-bitは将来のために予約されている。【訳注: 現在は未使用】
    1-bitの"skip-worktree flag" (sparse checkoutで使われる)
    1-bitの"intent-to-add flag" ("git add -N"で使われる)
    13-bitは未使用で、0固定。
  エントリのパス名(可変長)。トップディレクトリからの相対パスで、最初の'/'は除く。パスの区切り文字は'/'を使う。特殊なパス要素である、"."。".."、".git"は許容されない。また、末尾の不要な'/'も許容されない。
    正確なエンコードは未定義だが、'.'と'/'は7-bit ASCIIにエンコードされ、NULバイトを含まないものでなくてはならない。(つまり、これはUNIXのパス名である。)
  (バージョン4のみ) バージョン4では、エントリのパス名は1つ前のエントリのパス名から"prefix-compressed"される。(一番初めのエントリは1つ前のエントリのパス名を空文字と解釈してエンコードされる。)
    エントリの初めに、任意の長さの整数Nを記述し、その後NULバイトで終わる文字列Sを記述する。("OFS_DELTA pack entries"をエンコードする際のオフセットと同じである。pack-format.txtを参照。)
    このエントリのパス名は、1つ前のエントリのパス名の末尾からNバイトを取り除き、そこに文字列Sを追加したものとなる。
  エントリ全体が8バイトの倍数になるように、1-8個のNULバイトでパディングする。なお、name列の後にNULバイトが来るようになること。
  (バージョン4のみ) バージョン4では、パス名後のパディングは存在しない。
  なお、"split index mode"でのインデックスエントリの書き方は上記とは完全に異なる。詳細は後述を参照。

== Extensions

=== Cached tree

  Cached tree extension contains pre-computed hashes for trees that can
  be derived from the index. It helps speed up tree object generation
  from index for a new commit.

  When a path is updated in index, the path must be invalidated and
  removed from tree cache.

  The signature for this extension is { 'T', 'R', 'E', 'E' }.

  A series of entries fill the entire extension; each of which
  consists of:

  - NUL-terminated path component (relative to its parent directory);

  - ASCII decimal number of entries in the index that is covered by the
    tree this entry represents (entry_count);

  - A space (ASCII 32);

  - ASCII decimal number that represents the number of subtrees this
    tree has;

  - A newline (ASCII 10); and

  - 160-bit object name for the object that would result from writing
    this span of index as a tree.

  An entry can be in an invalidated state and is represented by having
  a negative number in the entry_count field. In this case, there is no
  object name and the next entry starts immediately after the newline.
  When writing an invalid entry, -1 should always be used as entry_count.

  The entries are written out in the top-down, depth-first order.  The
  first entry represents the root level of the repository, followed by the
  first subtree--let's call this A--of the root level (with its name
  relative to the root level), followed by the first subtree of A (with
  its name relative to A), ...

=== Resolve undo

  A conflict is represented in the index as a set of higher stage entries.
  When a conflict is resolved (e.g. with "git add path"), these higher
  stage entries will be removed and a stage-0 entry with proper resolution
  is added.

  When these higher stage entries are removed, they are saved in the
  resolve undo extension, so that conflicts can be recreated (e.g. with
  "git checkout -m"), in case users want to redo a conflict resolution
  from scratch.

  The signature for this extension is { 'R', 'E', 'U', 'C' }.

  A series of entries fill the entire extension; each of which
  consists of:

  - NUL-terminated pathname the entry describes (relative to the root of
    the repository, i.e. full pathname);

  - Three NUL-terminated ASCII octal numbers, entry mode of entries in
    stage 1 to 3 (a missing stage is represented by "0" in this field);
    and

  - At most three 160-bit object names of the entry in stages from 1 to 3
    (nothing is written for a missing stage).

=== Split index

  In split index mode, the majority of index entries could be stored
  in a separate file. This extension records the changes to be made on
  top of that to produce the final index.

  The signature for this extension is { 'l', 'i', 'n', 'k' }.

  The extension consists of:

  - 160-bit SHA-1 of the shared index file. The shared index file path
    is $GIT_DIR/sharedindex.<SHA-1>. If all 160 bits are zero, the
    index does not require a shared index file.

  - An ewah-encoded delete bitmap, each bit represents an entry in the
    shared index. If a bit is set, its corresponding entry in the
    shared index will be removed from the final index.  Note, because
    a delete operation changes index entry positions, but we do need
    original positions in replace phase, it's best to just mark
    entries for removal, then do a mass deletion after replacement.

  - An ewah-encoded replace bitmap, each bit represents an entry in
    the shared index. If a bit is set, its corresponding entry in the
    shared index will be replaced with an entry in this index
    file. All replaced entries are stored in sorted order in this
    index. The first "1" bit in the replace bitmap corresponds to the
    first index entry, the second "1" bit to the second entry and so
    on. Replaced entries may have empty path names to save space.

  The remaining index entries after replaced ones will be added to the
  final index. These added entries are also sorted by entry name then
  stage.

== Untracked cache

  Untracked cache saves the untracked file list and necessary data to
  verify the cache. The signature for this extension is { 'U', 'N',
  'T', 'R' }.

  The extension starts with

  - A sequence of NUL-terminated strings, preceded by the size of the
    sequence in variable width encoding. Each string describes the
    environment where the cache can be used.

  - Stat data of $GIT_DIR/info/exclude. See "Index entry" section from
    ctime field until "file size".

  - Stat data of core.excludesfile

  - 32-bit dir_flags (see struct dir_struct)

  - 160-bit SHA-1 of $GIT_DIR/info/exclude. Null SHA-1 means the file
    does not exist.

  - 160-bit SHA-1 of core.excludesfile. Null SHA-1 means the file does
    not exist.

  - NUL-terminated string of per-dir exclude file name. This usually
    is ".gitignore".

  - The number of following directory blocks, variable width
    encoding. If this number is zero, the extension ends here with a
    following NUL.

  - A number of directory blocks in depth-first-search order, each
    consists of

    - The number of untracked entries, variable width encoding.

    - The number of sub-directory blocks, variable width encoding.

    - The directory name terminated by NUL.

    - A number of untracked file/dir names terminated by NUL.

The remaining data of each directory block is grouped by type:

  - An ewah bitmap, the n-th bit marks whether the n-th directory has
    valid untracked cache entries.

  - An ewah bitmap, the n-th bit records "check-only" bit of
    read_directory_recursive() for the n-th directory.

  - An ewah bitmap, the n-th bit indicates whether SHA-1 and stat data
    is valid for the n-th directory and exists in the next data.

  - An array of stat data. The n-th data corresponds with the n-th
    "one" bit in the previous ewah bitmap.

  - An array of SHA-1. The n-th SHA-1 corresponds with the n-th "one" bit
    in the previous ewah bitmap.

  - One NUL.

